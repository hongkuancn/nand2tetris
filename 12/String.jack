// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array arr;
    field int length;
    field int mLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 1) {
            let mLength = maxLength;
            let length = 0;
            return this;
        }
        let arr = Array.new(maxLength);
        let length = 0;
        let mLength = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (mLength = 0) {
            return;
        }
        do arr.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var Array tmp;
        var int i;

        if (length = mLength) {
            let tmp = Array.new(mLength * 2);
            let i = 0;
            while (i < length) {
                let tmp[i] = arr[i];
                let i = i + 1;
                let mLength = mLength * 2;
            }
            let arr = tmp;
        }

        let arr[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i;
        var int sum;
        var boolean minus;

        let i = 0;
        if (arr[0] = 45) {
            let minus = true;
            let i = 1;
        }

        let sum = 0;
        while ((i < length) & (arr[i] > 47) & (arr[i] < 58)) {
            let sum = sum * 10;
            let sum = sum + (arr[i] - 48);
            let i = i + 1;
        }
        if (minus) {
            return -sum;
        }
        return sum;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i;
        var int c;
        var Array tmp;
        var int tmpi;

        let i = 0;
        let tmp = Array.new(16);
        let tmpi = 0;

        if (val < 0) {
            let arr[i] = 45;
            let i = i + 1;
            let length = 1;
        }
        let val = Math.abs(val);

        while (~(val = 0)) {
            let c = val - (val / 10 * 10);
            let tmp[tmpi] = (c + 48);
            let val = val / 10;
            let tmpi = tmpi + 1;
        }

        let tmpi = tmpi - 1;
        while (tmpi > -1) {
            let arr[i] = tmp[tmpi];
            let i = i + 1;
            let tmpi = tmpi - 1;
            let length = length + 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
