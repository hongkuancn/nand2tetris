// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer).
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int x;
        var int val;

        let n = 16;
        let x = 0;
        let val = 1;
        let powersOfTwo = Array.new(n);

        while (x < (n - 1)) {
            let powersOfTwo[x] = val;
            let val = val + val;
            let x = x + 1;
        }

        return;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method.
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int shiftdex;
        var int i;
        var int sum;

        let sum = 0;
        let i = 0;
        let shiftdex = x;

        while (i < n) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftdex;
            }
            let shiftdex = shiftdex + shiftdex;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var boolean minus;
        var int res;
        var int abx;
        var int aby;

        let minus = false;
        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            let minus = true;
        }
        if (x < 0) {
            let abx = Math.abs(x);
        } else {
            let abx = x;
        }
        if (y < 0) {
            let aby = Math.abs(y);
        } else {
            let aby = y;
        }

        if (aby > abx) {
            return 0;
        }

        let q = Math.divide(abx, 2 * aby);
        if ((abx - (2 * q * aby)) < aby) {
            let res = 2 * q;
        } else {
            let res = 2 * q + 1;
        }

        if (minus) {
            return -res;
        }
        return res;

    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int i;
        var int y;
        var int tmp;

        let y = 0;
        let i = n / 2 - 1;

        while (~(i < 0)) {
            let tmp = y + powersOfTwo[i];
            if ((~((tmp * tmp) > x)) & ((tmp * tmp) > 0)) {
                let y = tmp;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if ((x > 0) | ( x = 0)) {
            return x;
        } else {
            return -x;
        }
    }


    function boolean bit(int x, int i) {
        var int mask;
        var int m;

        let m = 0;
        let mask = 1;
        while (m < i) {
            let mask = mask + mask;
            let m = m + 1;
        }

        if (~((x & mask) = 0)) {
            return true;
        } else {
            return false;
        }
    }
}
